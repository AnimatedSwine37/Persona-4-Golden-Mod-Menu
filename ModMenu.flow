/*
	REQUIRED DEPENDENCIES
*/
import( "ModMenu.msg" ); //Mod Menu strings
import( "Utilities.flow" ); //Frequently reused Mod Menu operations

void ModMenuDisplay()
{
	while(true) 
	{
		SET_SEL_CHOICE_KEYBIND(14, 3);
		int selection = ADV_SEL(Mod_Menu_Text, Mod_Menu, 0);
		switch (selection)
		{
			case 0:
				if (CallMenuDisplay() == -1)
					break;
				else
					return;
			case 1:
				if (PlayerMenuDisplay() == -1)
					break;
				else
					return;
			case 2:
				Flag_Menu();
				return;
			case 3:
				return;
		}
	}
}

void RemoveParty()
{
	int index = 2;
	while (index < 9)
	{
		RM_PARTY(index);
		index++;
	}
}

int CallMenuDisplay()
{
	// Disable Call Battle if not inside dungeon since it softlocks
	int mask = 8;
	int floor = GET_FLOOR_ID();
	if (floor > 1 && floor != 2 && floor != 3 && floor != 5 && floor != 20 && floor != 40 && floor != 60 && floor != 80 && floor != 100 && floor != 120 && floor != 140 && floor != 160)
		mask = 0;
	while(true) 
	{
		SET_SEL_CHOICE_KEYBIND(14, 6);
		int selection = ADV_SEL(Call_Menu_Text, Call_Menu_1, mask);
		switch (selection)
		{
			case 0:
				if (FieldSelect() == -1)
					break;
				else
					return 0;
			case 1:
				if (EventSelect() == -1)
					break;
				else
					return 0;
			case 2:
				if (Facilities() == -1)
					break;
				else
					return 0;
			case 3:
				if (BattleSelect() == -1)
					break;
				else
					return 0;
			case 4:
				if (FloorSelect() == -1)
					break;
				else
					return 0;
			case 5:
				if (CallDungeon() == -1)
					break;
				else
					return 0;
			case 6:
				if (CallMenuDisplay2() == -1)
					break;
				else
					return 0;
			case 7:
				ModMenuDisplay();
				return 0;
		}
	}
	return -1;
}

int CallMenuDisplay2()
{
	while(true) 
	{
		SET_SEL_CHOICE_KEYBIND(14, 4);
		int selection = ADV_SEL(Call_Menu_Text_2, Call_Menu_2, 0);
		switch (selection)
		{
			case 0:
				if (CutsceneSelect() == -1)
					break;
				else
					return 0;
			case 1:
				BAD_END_CREDITS();
				break;
			case 2:
				if (BGMSelect() == -1)
					break;
				else
					return 0;
			case 3:
				if (SFXSelect() == -1)
					break;
				else
					return 0;
			case 4:
				if (CallMenuDisplay() == -1)
					break;
				else
					return 0;
			case 5:
				return 0;
		}
	}
	return -1;
}

int PlayerMenuDisplay()
{
	while(true) 
	{
		SET_SEL_CHOICE_KEYBIND(14, 7);
		int selection = ADV_SEL(Player_Menu_Text, Player_Menu, 0);
		switch (selection)
		{
			case 0:
				if (DateSelect() == -1)
					break;
				else
					return 0;
			case 1:
				if (ChangeYen() == -1)
					break;
				else
					return 0;
			case 2:
				if (ChangeItem() == -1)
					break;
				else
					return 0;
			case 3:
				SL();
				break;
			case 4:
				SS();
				break;
			case 5:
				PartyChoice();
				return 0;
			case 6:
				RefillHPSP();
				break;
			case 7:
				ModMenuDisplay();
				return 0;
		}
	}
	return -1;
}

void RefillHPSP()
{
	FUNCTION_006D( 5, 9 );
    FADE( 1, 5 );
    FUNCTION_0024( 0, 255, 0 );
    FADE_SYNC();
	int index = 1;
	while (index < 9)
	{
		int hp = GET_TOT_HP(index);
		int sp = GET_TOT_SP(index);
		SET_HP(index, hp);
		SET_SP(index, sp);
		index++;
	}
	FUNCTION_0015( 15 );
    FADE_SYNC();
}

int ChangeYen()
{
	int new_yen = Get_Number(7, MSG_7);
	if (new_yen == -1)
		return -1;
	int reset = 0 - ADD_YEN(0);
	ADD_YEN(reset);
	ADD_YEN(new_yen);
	return 0;
}

int ChangeItem()
{
	tryagain:
	int item = Get_Number(4, MSG_4_Item);
	if (item == -1)
		return -1;
	if (item > 2559)
	{
		OPEN_MSG_WIN();
		MSG( InvalidItem );
		CLOSE_MSG_WIN();
		goto tryagain;
	}
	SET_MSG_VAR(0, item, 1);
	SET_MSG_VAR(1, GET_ITEM(item), 0);
	OPEN_MSG_WIN();
	MSG( ConfirmItem );
	int confirm = SEL(YESNO_SEL);
	CLOSE_MSG_WIN();
	if (confirm == 1)
		return -1;
	int numItems = Get_Number(2, MSG_2_Item);
	if (numItems == -1)
		return -1;
	SET_ITEM(item, numItems);
	return 0;
}

int BGMSelect()
{
	int bgm = Get_Number(5, MSG_5);
	if (bgm == -1)
		return -1;
	CALL_BGM(bgm);
	return 0;
}

int FieldSelect()
{
	int major = Get_Number(3, MSG_3_Major);
	if (major == -1)
		return -1;
	int minor = Get_Number(3, MSG_3_Minor);
	if (minor == -1)
		return -1;
	RemoveParty();
	FADE(2, 5);
	FADE_SYNC();
	CALL_FIELD(major, minor, 0, 0);
	return 0;
}

int EventSelect()
{
	int floor = GET_FLOOR_ID();
	int fieldMajor = GET_FIELD_MAJOR();
	int fieldMinor = GET_FIELD_MINOR();
	int major = Get_Number(3, MSG_3_Major);
	if (major == -1)
		return -1;
	int minor = Get_Number(3, MSG_3_Minor);
	if (minor == -1)
		return -1;
	FADE(2, 5);
	FADE_SYNC();
	CALL_EVENT(major, minor, 0);
	if (floor > 0 )
	{
		if (floor == 7 || floor == 13 || floor == 31 || floor == 51 || floor == 70 
		|| floor == 89 || floor == 110 || || floor == 122 || floor == 129)
			CALL_DUNGEON(floor, 0);
		else
			CALL_FLOOR(floor);
	}
	else
		CALL_FIELD(fieldMajor, fieldMinor, 0, 0);
	return 0;
}

int BattleSelect()
{
	SET_SEL_CHOICE_KEYBIND(14, 2);
	int battle = ADV_SEL(BATTLE_SEL_Text, BATTLE_SEL, 0);
	if (battle == 0)
	{
		int major = Get_Number(3, MSG_3);
		if (major == -1)
			return -1;
		CALL_BATTLE(major, 0);
		return 0;
	}
	else if (battle == 1)
	{
		return Battles();
	}
	return -1;
}

int DateSelect()
{
	int major = Get_Number(2, MSG_2_Major);
	if (major == -1)
		return -1;
	int minor = Get_Number(2, MSG_2_Minor);
	if (minor == -1)
		return -1;
	NEXT_DATE(major, minor, 0);
	PLAY_SOUNDEFFECT( 173 );
	RemoveParty();
	FADE( 1, 5 );
	FADE_SYNC();
	TV_STUDIO();
	return 0;
}

int Facilities()
{
	SET_SEL_CHOICE_KEYBIND(14, 7);
	int floor = GET_FLOOR_ID();
	int fieldMajor = GET_FIELD_MAJOR();
	int fieldMinor = GET_FIELD_MINOR();
	int facility = ADV_SEL(Facility_Menu_Text, Facility_Menu, 0);
	switch (facility) 
	{
		case 0:
			CALL_FIELD(20, 1, 0, 0);
			return 0;
		case 1:
			TOWN_MAP(1);
			return 0;
		case 2:
			DAIDARA_SHOP();
			if (floor > 0 )
			{
				if (floor == 7 || floor == 13 || floor == 31 || floor == 51 || floor == 70 
				|| floor == 89 || floor == 110 || || floor == 122 || floor == 129)
					CALL_DUNGEON(floor, 0);
				else
					CALL_FLOOR(floor);
			}
			else
				CALL_FIELD(fieldMajor, fieldMinor, 0, 0);
			return 0;
		case 3:
			SHIROKU_SHOP();
			if (floor > 0 )
			{
				if (floor == 7 || floor == 13 || floor == 31 || floor == 51 || floor == 70 
				|| floor == 89 || floor == 110 || || floor == 122 || floor == 129)
					CALL_DUNGEON(floor, 0);
				else
					CALL_FLOOR(floor);
			}
			else
				CALL_FIELD(fieldMajor, fieldMinor, 0, 0);
			return 0;
		case 4:
			SHIROKU_PUB();
			if (floor > 0 )
			{
				if (floor == 7 || floor == 13 || floor == 31 || floor == 51 || floor == 70 
				|| floor == 89 || floor == 110 || || floor == 122 || floor == 129)
					CALL_DUNGEON(floor, 0);
				else
					CALL_FLOOR(floor);
			}
			else
				CALL_FIELD(fieldMajor, fieldMinor, 0, 0);
			return 0;
		case 5:
			VELVET_ROOM();
			if (floor > 0 )
			{
				if (floor == 7 || floor == 13 || floor == 31 || floor == 51 || floor == 70 
				|| floor == 89 || floor == 110 || || floor == 122 || floor == 129)
					CALL_DUNGEON(floor, 0);
				else
					CALL_FLOOR(floor);
			}
			else
				CALL_FIELD(fieldMajor, fieldMinor, 0, 0);
			return 0;
		case 6:
			JUNES_FOODCOURT();
			if (floor > 0 )
			{
				if (floor == 7 || floor == 13 || floor == 31 || floor == 51 || floor == 70 
				|| floor == 89 || floor == 110 || || floor == 122 || floor == 129)
					CALL_DUNGEON(floor, 0);
				else
					CALL_FLOOR(floor);
			}
			else
				CALL_FIELD(fieldMajor, fieldMinor, 0, 0);
			return 0;
		case 7:
			return -1;
	}
	return -1;
}

int SFXSelect()
{
	int major = Get_Number(3, MSG_3);
	if (major == -1)
		return -1;
	PLAY_SOUNDEFFECT(major);
	return 0;
}

void PartyChoice()
{
	int index = 0;
	int numMembers = 0;
	int removeMask = 63;
	int addMask = 0;
	
	while (index < 3)
	{
		int id = GET_PARTY_MEMBER_ID(index);
		if (id > 1)
		{
			switch (id)
			{
				case 2:
					removeMask = removeMask - 1;
					addMask = addMask + 1;
					break;
				case 3:
					removeMask = removeMask - 2;
					addMask = addMask + 2;
					break;
				case 4:
					removeMask = removeMask - 4;
					addMask = addMask + 4;
					break;
				case 6:
					removeMask = removeMask - 8;
					addMask = addMask + 8;
					break;
				case 7:
					removeMask = removeMask - 0x10;
					addMask = addMask + 0x10;
					break;
				case 8:
					removeMask = removeMask - 0x20;
					addMask = addMask + 0x20;
					break;
			}
			numMembers = numMembers + 1;
		}
		index = index + 1;
	}
	
	int optionMask = 0;
	if (numMembers == 0)
		optionMask = optionMask + 2;
	SET_SEL_CHOICE_KEYBIND( 14, 2 );
	int option = ADV_SEL(ModOptionMsg, ModOptionSel, optionMask);
	
	if (option == 0)
	{
		int addedMember = ModChooseMember(ModSelectMemberMsg, addMask);
		if (addedMember == -1)
			return;
		if (numMembers == 3)
		{
			int replacedMember = ModChooseMember(ModReplaceMemberMsg, removeMask);
			if (replacedMember == -1)
				return;
			RM_PARTY(replacedMember);
		}
		
		ADD_PARTY(addedMember);
	}
	else if (option == 1)
	{
		int removedMember = ModChooseMember(ModRemoveMemberMsg, removeMask);
		if (removedMember == -1)
			return;
		RM_PARTY(removedMember);
	}
	else
		return;

	// Reload floor
	int floor = GET_FLOOR_ID();
	// Only reload floor mid-dungeon (not entrances) to get party member in
	if (floor > 1 && floor != 2 && floor != 3 && floor != 5 && floor != 20 && floor != 40 && floor != 60 && floor != 80 && floor != 100 && floor != 120 && floor != 140 && floor != 160)
	{
		dng_set_npc();
		FADE( 1, 10 );
		FADE_SYNC();
		if (floor == 7 || floor == 13 || floor == 31 || floor == 51 || floor == 70 
		|| floor == 89 || floor == 110 || || floor == 122 || floor == 129)
			CALL_DUNGEON(floor, 0);
		else
			CALL_FLOOR(floor);
	}
}

int ModChooseMember(int text, int mask)
{
	SET_SEL_CHOICE_KEYBIND( 14, 6 );
	int member;
	int selection = ADV_SEL(text, ModPartySel, mask);
	switch (selection)
	{
		case 0:
			member = 2;
			break;
		case 1:
			member = 3;
			break;
		case 2:
			member = 4;
			break;
		case 3:
			member = 6;
			break;
		case 4:
			member = 7;
			break;
		case 5:
			member = 8;
			break;
		case 6:
			member = -1;
			break;
	}
	return member;
}

int CutsceneSelect()
{
	int floor = GET_FLOOR_ID();
	int fieldMajor = GET_FIELD_MAJOR();
	int fieldMinor = GET_FIELD_MINOR();
	int major = Get_Number(2, MSG_2_Major);
	if (major == -1)
		return -1;
	STOP_BGM( 0 );
	PLAY_CUTSCENE(major);
	FUNCTION_0065();
	FADE(1, 10);
	FADE_SYNC();
	if (floor > 0 )
	{
		if (floor == 7 || floor == 13 || floor == 31 || floor == 51 || floor == 70 
		|| floor == 89 || floor == 110 || || floor == 122 || floor == 129)
			CALL_DUNGEON(floor, 0);
		else
			CALL_FLOOR(floor);
	}
	else
		CALL_FIELD(fieldMajor, fieldMinor, 0, 0);
	return 0;
}

int FloorSelect()
{
	int major = Get_Number(3, MSG_3);
	if (major == -1)
		return -1;
	dng_set_npc();
	FADE( 1, 10 );
	FADE_SYNC();
	CALL_FLOOR(major);
	return 0;
}

void SpawnNPC()
{
	int major = Get_Number(5, MSG_5);
	if (major == -1)
		return;
	SPAWN_NPC(0, major);
}

int CallDungeon()
{
	int major = Get_Number(3, MSG_3_Major);
	if (major == -1)
		return -1;
	int minor = Get_Number(4, MSG_4);
	if (minor == -1)
		return -1;
	FADE(4, 10);
	FADE_SYNC();
	CALL_DUNGEON(major, minor);
	return 0;
}

void Flag_Menu()
{
	while(true)
	{
		int flag = ADV_SEL(Flag_Menu_Text, Flag_Menu, 0);
		switch (flag) 
		{
			case 0:
				ToggleBit();
				break;
			case 1:
				ToggleBitRange();
				break;
			case 2:
				ToggleMenuOptions();
				return;
			case 3:
				ModMenuDisplay();
				return;
		}
	}
}

void ToggleMenuOptions()
{
	int toggle = SEL(OnOff);
	if (toggle == 0)
	{
		BIT_ON(6429);
	}
	else
	{
		BIT_OFF(6429);
	}
}

void ToggleBit()
{
	int major = Get_Number(4, MSG_4);
	if (major == -1)
		return;
	int toggle = ADV_SEL(OnOff_Text, OnOff, 0);
	if (toggle == 0)
	{
		BIT_ON(major);
	}
	else
	{
		BIT_OFF(major);
	}
}

void ToggleBitRange()
{
	int major = Get_Number(4, MSG_4_Major);
	if (major == -1)
		return;
	int minor = Get_Number(4, MSG_4_Minor);
	if (minor == -1)
		return;
	int i = major;
	int toggle = ADV_SEL(OnOff_Text, OnOff, 0);
	if (toggle == 0)
	{
		while (i <= minor)
		{
			BIT_ON(i);
			i++;
		}
	}
	else
	{
		while (i <= minor)
		{
			BIT_OFF(i);
			i++;
		}
	}
}

void SS()
{
	while(true)
	{
		SET_SEL_CHOICE_KEYBIND(14, 6);
		int ss = ADV_SEL(SS_Menu_Text, SS_Menu, 0);
		int stat = ss;
		switch (ss)
		{
			case 0:
			case 1:
			case 2:
			case 3:
			case 4:
				UpdateSS(ss);
				break;
			case 5:
				MaxStats();
				return;
			case 6:
				return;
		}
	}
}

void UpdateSS(int stat)
{
	int op = ADV_SEL(Operation,PlusOrMinus,0);
	int number = Get_Number(3, MSG_3);
	if (op == 1)
		number = -number;
	GET_SOCIAL_STATS(stat, number);
}

void MaxStats()
{
	int index = 0;
	while (index < 5)
	{
		GET_SOCIAL_STATS(index, 240);
		index++;
	}
}

void SL()
{
	while(true)
	{
		SET_SEL_CHOICE_KEYBIND(14, 5);
		int sl = ADV_SEL(SL_Menu_Text, SL_Menu, 0);
		switch (sl)
		{
			case 0:
				IncreaseSL();
				break;
			case 1:
				ReverseSL();
				break;
			case 2:
				BreakSL();
				break;
			case 3:
				LevelUpSL();
				break;
			case 4:
				AddSL();
				break;
			case 5:
				return;
		}
	}
}

void IncreaseSL()
{
	int major = Get_Number(2, MSG_2);
	if (major == -1)
		return;
	EVT_FUNCTION_0031( major, 50, 1 );
	SL_LVLUP_VISUAL(major, (GET_SL_LEVEL(major) + 1), 1);
	INCREASE_SL(major);
}

void ReverseSL()
{
	int major = Get_Number(2, MSG_2);
	if (major == -1)
		return;
	SL_LVLUP_VISUAL(major, 11, 1);
	REVERSE_SL(major, 1);
}

void BreakSL()
{
	int major = Get_Number(2, MSG_2);
	if (major == -1)
		return;
	SL_LVLUP_VISUAL(major, 12, 1);
	BREAK_SL(major, 1);
}

void LevelUpSL()
{
	int major = Get_Number(2, MSG_2_Major);
	if (major == -1)
		return;
	int minor = Get_Number(2, MSG_2_Minor);
	if (minor == -1)
		return;
	int oddity = Get_Number(2, MSG_2);
	if (oddity == -1)
		return;
	SL_LVLUP_VISUAL(major, minor, oddity);
	EVT_FUNCTION_003D();
}

void AddSL()
{
	int major = Get_Number(2, MSG_2);
	if (major == -1)
		return;
	EVT_FUNCTION_0016( major );
	EVT_FUNCTION_0031( major, 0, 1 );
}

int Battles()
{
	SET_SEL_CHOICE_KEYBIND(14, 8);
	int boss = ADV_SEL( BOSS_SEL1_Text, BOSS_SEL1, 0 );
	switch (boss)
	{
		case 0:
			CALL_BATTLE( 512, 0 );
			break;
		case 1:
			CALL_BATTLE( 513, 0 );
			break;
		case 2:
			CALL_BATTLE( 514, 0 );
			break;
		case 3:
			CALL_BATTLE( 515, 0 );
			break;
		case 4:
			CALL_BATTLE( 516, 0 );
			break;
		case 5:
			CALL_BATTLE( 517, 0 );
			break;
		case 6:
			CALL_BATTLE( 518, 0 );
			break;
		case 7:
			SET_SEL_CHOICE_KEYBIND(14, 7);
			int boss2 = ADV_SEL( BOSS_SEL2_Text, BOSS_SEL2, 0 );
			switch (boss2)
			{
				case 0:
					CALL_BATTLE( 519, 0 );
					break;
				case 1:
					CALL_BATTLE( 520, 0 );
					break;
				case 2:
					CALL_BATTLE( 521, 0 );
					break;
				case 3:
					CALL_BATTLE( 522, 0 );
					break;
				case 4:
					CALL_BATTLE( 523, 0 );
					break;
				case 5:
					CALL_BATTLE( 524, 0 );
					break;
				case 6:
					CALL_BATTLE( 525, 0 );
					break;
				case 7:
					break;
			}
			break;
		case 8:
			return -1;
	}
	return 0;
}


